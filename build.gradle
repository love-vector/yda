plugins {
    id 'java-library'
    id 'com.diffplug.spotless' version '6.25.0+'
    id 'checkstyle'
    id 'maven-publish'
    id 'org.jreleaser' version '1.13.1'
    id 'io.spring.dependency-management' version '1.1.7'
}

allprojects {
    repositories {
        mavenCentral()
        maven { url 'https://repo.spring.io/milestone' }
    }
}


subprojects {
    apply plugin: 'java-library'
    apply plugin: 'com.diffplug.spotless'
    apply plugin: 'checkstyle'
    apply plugin: 'maven-publish'
    apply plugin: 'org.jreleaser'
    apply plugin: "io.spring.dependency-management"

    group = 'ai.yda-framework'
    version = '0.2.0-YDAL-108-google-drive-retriever'

    java {
        withJavadocJar()
        withSourcesJar()
        sourceCompatibility = JavaVersion.VERSION_17
        targetCompatibility = JavaVersion.VERSION_17
    }

    configurations {
        compileOnly {
            extendsFrom annotationProcessor
        }
    }

    dependencyManagement {
        imports {
            mavenBom "org.springframework.ai:spring-ai-bom:1.0.0-M5"
        }
    }

    dependencies {
        // Lombok
        compileOnly 'org.projectlombok:lombok:1.18.34'
        annotationProcessor 'org.projectlombok:lombok:1.18.34'
    }

    spotless {
        java {
            palantirJavaFormat()
            removeUnusedImports()
            licenseHeaderFile(rootProject.file("copyright.txt"))
            importOrder('java', 'javax|jakarta', '', 'org.springframework', 'ai.yda', '\\#')
        }
    }

    compileJava.dependsOn 'spotlessApply'

    checkstyle {
        toolVersion = '10.3.1'
        config = rootProject.resources.text.fromFile('.config/checkstyle/checkstyle.xml')
        showViolations = true
        ignoreFailures = true
    }

    check.dependsOn 'checkstyleMain', 'checkstyleTest'

    publishing {
        publications {
            mavenJava(MavenPublication) {
                from components.java
                versionMapping {
                    usage('java-api') {
                        fromResolutionOf('runtimeClasspath')
                    }
                    usage('java-runtime') {
                        fromResolutionResult()
                    }
                }
                pom {
                    name = project.findProperty('projectName') ?: null
                    description = project.findProperty('projectDescription') ?: null
                    url = 'https://yda-framework.ai/'
                    licenses {
                        license {
                            name = 'GNU LESSER GENERAL PUBLIC LICENSE, Version 3'
                            url = 'https://www.gnu.org/licenses/lgpl-3.0.txt'
                        }
                    }
                    scm {
                        connection = 'scm:git:https://github.com/love-vector/yda.git'
                        developerConnection = 'scm:git:ssh://github.com/love-vector/yda.git'
                        url = 'https://github.com/love-vector/yda'
                    }
                    developers {
                        developer { name = 'Nikita Litvinov'; email = 'n.litvinov@vector-inc.dev' }
                        developer { name = 'Dmitry Marchuk'; email = 'd.marchuk@vector-inc.dev' }
                        developer { name = 'Iryna Kopchak'; email = 'i.kopchak@vector-inc.dev' }
                        developer { name = 'Bogdan Synenko'; email = 'b.synenko@vector-inc.dev' }
                    }
                }
            }
        }
        repositories {
            maven {
                url = layout.buildDirectory.dir('staging-deploy')
            }
        }
    }

    jreleaser {
        strict = false
        gitRootSearch = true
        signing {
            active = 'ALWAYS'
            armored = true
        }
        deploy {
            maven {
                mavenCentral {
                    sonatype {
                        checksums = true
                        active = 'ALWAYS'
                        url = 'https://central.sonatype.com/api/v1/publisher'
                        stagingRepository(layout.buildDirectory.dir("staging-deploy").get().toString())
                    }
                }
            }
        }
    }

    tasks.named('publish') {
        doLast {
            def jreleaserDir = file("${project.buildDir}/jreleaser")
            if (!jreleaserDir.exists()) {
                jreleaserDir.mkdirs()
            }
            println "Folder jreleaser for project: ${project.name}"
        }
    }

    afterEvaluate {
        if (plugins.hasPlugin('org.jreleaser.gradle.plugin.JReleaserPlugin')) {
            tasks.register("runJReleaserConfig") {
                dependsOn tasks.named("jreleaserConfig")
            }
        }
    }

    build.dependsOn 'publishToMavenLocal'

    processResources {
        from(rootProject.resources.text.fromFile('.config/log/logback-spring.xml'))
    }
}

task runJReleaserConfigInAllSubprojects {
    dependsOn subprojects.findAll { subproject ->
        subproject.tasks.findByName("jreleaserConfig") != null
    }.collect { subproject ->
        subproject.tasks.named("jreleaserConfig")
    }
}

task runJReleaserConfigAndFullReleaseForAllSubprojects {
    dependsOn subprojects.findAll { subproject ->
        subproject.tasks.findByName("jreleaserConfig") != null
    }.collect { subproject ->
        subproject.tasks.named("jreleaserConfig")
    }

    finalizedBy subprojects.findAll { subproject ->
        subproject.tasks.findByName("jreleaserFullRelease") != null
    }.collect { subproject ->
        subproject.tasks.named("jreleaserFullRelease")
    }

    doLast {
        subprojects.each { subproject ->
            if (subproject.tasks.findByName("jreleaserConfig")?.state?.failure) {
                println "Skipping jreleaserFullRelease for project: ${subproject.name} due to failure in jreleaserConfig."
            } else {
                println "jreleaserConfig for project: ${subproject.name} was successful, proceeding to jreleaserFullRelease."
            }
        }
    }
}
